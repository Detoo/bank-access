#!/usr/bin/env python
# Copyright (c) The SimpleFIN Team
# See LICENSE for details.

from siloscript import getValue, getToken
#from siloscript import putValue
from functools import partial
from splinter import Browser
from datetime import date, timedelta
from parsefin import parseFile
import json
import argparse
import tempfile
import os

i = 0
def screenshot(browser, name=''):
    global i
    name = name or 'def'
    i += 1
    browser.driver.save_screenshot('/tmp/images/%d-%s.png' % (i, name))
    open('/tmp/images/%d-%s.html' % (i, name), 'wb').write(browser.html.encode('utf-8'))
    open('/tmp/images/%d-%s.cookies.json' % (i, name), 'wb').write(json.dumps(browser.cookies.all(), indent=2))


from HTMLParser import HTMLParser

class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ' '.join(self.fed)

def strip_tags(html):
    s = MLStripper()
    s.feed(html)
    return s.get_data()



def getOFX(username, password, startdate, enddate, verbose=False):
    download_dir = tempfile.mkdtemp()
    preferences = {
        'browser.download.folderList': 2, 
        'browser.download.manager.showWhenStarting': False,
        'browser.download.dir': download_dir,
        'browser.helperApps.neverAsk.saveToDisk': 'application/x-ofx', 
    }
    with Browser('firefox', profile_preferences=preferences) as browser:
        shot = partial(screenshot, browser)
        if not verbose:
            shot = lambda *a,**kw:None

        # load cookies from before, if possible
        # try:
        #     last_cookies = getValue('cookies')
        #     print 'got cookies: %r' % (last_cookies,)
        # except:
        #     print 'no cookies'

        #----------------------------------------------------------------------
        # home page
        #----------------------------------------------------------------------
        browser.visit('https://www.chase.com')
        if not browser.is_element_present_by_name('usr_name', wait_time=10):
            shot('nousername')
            raise Exception("Can't find username input")
        shot('loaded')
        
        browser.find_by_id('usr_name_home').first.fill(username)
        browser.find_by_id('usr_password_home').first.fill(password)
        shot('filledin')
        browser.find_by_css('div.field.initialized.loginBtn a').first.click()
        shot('afterlogin')

        # maybe authorize the computer
        if browser.is_element_present_by_id('NextButton', wait_time=1):
            #------------------------------------------------------------------
            # computer not authorized
            #------------------------------------------------------------------
            browser.find_by_id('NextButton').first.click()

            #------------------------------------------------------------------
            # choose authorization method
            #------------------------------------------------------------------
            attempts = 3
            while attempts:
                attempts -= 1
                shot('id-computer-secondpage')

                labels = browser.find_by_css('label')

                options = []
                opt_dict = {}
                for label in labels:
                    if (label['for'] or '').startswith('usrCtrlOtp_'):
                        text = strip_tags(label.html).strip()
                        opt_dict[text] = label['for']
                        options.append(text)

                response = getValue('delivery_method',
                    prompt="How do you want to get a code?",
                    save=False,
                    options=options)
                delivery_method = opt_dict[response]

                browser.find_by_id(delivery_method).first.click()
                shot('chosen')
                browser.find_by_id('NextButton').first.click()

                #--------------------------------------------------------------
                # Enter code
                #--------------------------------------------------------------
                code = getValue('activation_code',
                    prompt="Enter the code you are given (leave blank if you didn't get it):",
                    save=False)
                if not code:
                    # go get another one
                    browser.find_by_id('ancNewIdentificationCode').first.click()
                    continue

                browser.find_by_id('usrCtrlOtp_txtActivationCode').first.fill(code)
                browser.find_by_id('usrCtrlOtp_txtPassword').first.fill(password)
                shot('code entered')
                browser.find_by_id('NextButton').first.click()
                shot('code submitted')
                break

            shot('device authorized')

        #----------------------------------------------------------------------
        # logged in to account
        #----------------------------------------------------------------------
        # if not browser.is_element_present_by_css('table.account.information', wait_time=10):
        #     shot('failed to sign in')
        #     raise Exception("Failed")
        shot('logged in')
        # putValue('cookies', json.dumps(browser.cookies.all()))

        link = browser.find_link_by_partial_href('Account/Activity').first
        account_id = link['href'].split('/')[-1]
        browser.visit('https://cards.chase.com/Account/DownloadActivity.aspx?AI=%s' % (account_id,))

        #----------------------------------------------------------------------
        # Download Activity
        #----------------------------------------------------------------------
        shot('activity')
        browser.find_by_id('SelectDateRange').first.click()

        browser.find_by_id('FromDate_Value').fill(startdate.strftime('%m/%d/%Y'))
        browser.find_by_id('ToDate_Value').fill(enddate.strftime('%m/%d/%Y'))
        browser.find_by_id('DownloadType').first.select('QFX')
        shot('before download')

        browser.find_by_id('BtnDownloadActivity').first.click()
        shot('after clicking download')

        files = os.listdir(download_dir)
        return os.path.join(download_dir, files[0])



def getTransactions(args):
    enddate = date.today()
    startdate = enddate - timedelta(days=args.days)
    username = getValue('username', prompt='Username?')
    password = getValue('password', prompt='Password?')

    domain = 'chase.com'
    ofx_file = getOFX(username, password, startdate, enddate, verbose=args.verbose)
    parsed = parseFile(open(ofx_file, 'rb'))
    os.remove(ofx_file)
    ret = {
        'accounts': []
    }
    for account in parsed['accounts']:
        a = {
            'org': {
                'domain': domain,
                'sfin-url': None,
            },
            'id': getToken(account['account_id']),
            'name': 'unknown',
            'currency': account['currency'],
            'balance': str(account['balance']),
            'available_balance': 'unknown',
            'balance-as-of': account['transaction_end'].isoformat(),
            'transactions': [],
        }
        for transaction in account['transactions']:
            t = {
                'id': transaction['id'],
                'posted': transaction['posted'].isoformat(),
                'amount': transaction['amount'],
                'description': transaction.get('memo', '') or transaction.get('name', ''),
            }
            a['transactions'].append(t)
        ret['accounts'].append(a)

    return ret


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v',
        action="store_true",
        help='Display debugging information')
    parser.add_argument('days',
        type=int,
        default=10,
        help='Days back of transactions to get (default %(default)s)')
    args = parser.parse_args()

    ret = getTransactions(args)
    print json.dumps(ret, indent=2)

